Overview

Shopify Store Insights-Fetcher allows you to retrieve key information from any Shopify store by scraping the website directly. This includes:

Full product catalog

Hero products

Brand policies (Privacy, Return, Refund)

FAQs

Social media handles

Contact details

About the brand text

Important links (Contact Us, Order Tracking, Blogs)

Optional competitor insights

The app exposes a FastAPI endpoint where a store URL can be provided, and it returns a well-structured JSON response.

Features

Fetches products and their variants from Shopify stores.

Detects Shopify platform automatically.

Extracts policies, FAQs, social handles, contacts, and important links.

Optional competitor analysis with insights.

Modular and extendable Python code with utils/ folder.

Can be deployed on Render, Heroku, or local machine.

Error handling with proper HTTP status codes.

Project Structure
shopify-insights-fetcher/
│
├── main.py                  # FastAPI app
├── requirements.txt         # Python dependencies
├── run.sh                   # Script to start server
├── .gitignore
├── README.md
└── utils/
    ├── fetch_utils.py       # Network & Shopify JSON fetching helpers
    └── parse_utils.py       # HTML parsing and extraction helpers

Installation

Clone the repository

git clone https://github.com/username/shopify-insights-fetcher.git
cd shopify-insights-fetcher


Create virtual environment (optional but recommended)

python -m venv venv
source venv/bin/activate  # Linux/Mac
venv\Scripts\activate     # Windows


Install dependencies

pip install -r requirements.txt

Usage

Start the FastAPI server

./run.sh


The server runs at:

http://localhost:8000


Open interactive API docs (Swagger UI):

http://localhost:8000/docs

API Endpoints
1. Health Check

URL: /health

Method: GET

Response:

{
  "status": "ok",
  "message": "API is running"
}

2. Fetch Brand Insights

URL: /fetch

Method: POST

Request JSON:

{
  "website_url": "https://memy.co.in",
  "include_competitors": true
}

Response JSON (example):

{
  "domain": "h",
  "name": "Example",
  "meta": {
    "is_shopify": true,
    "storefront_title": "Example Store",
    "timestamp": "2025-08-16T09:51:07.867715"
  },
  "brand_context": "About text of the brand",
  "product_catalog": [
    {
      "handle": "product-1",
      "title": "Product 1",
      "url": "https://example.com/products/product-1",
      "vendor": "Vendor Name",
      "product_type": "Category",
      "tags": ["tag1","tag2"],
      "price_min": "10.00",
      "price_max": "20.00",
      "images": ["https://example.com/image1.jpg"],
      "is_hero": true
    }
  ],
  "policies": [],
  "faqs": [],
  "social_handles": [],
  "contacts": [],
  "important_links": []
}


HTTP Errors:

401 - Website not found or unreachable

500 - Internal server error

Dependencies

fastapi - Web framework

uvicorn - ASGI server

requests - HTTP requests

tldextract - Extract domain for brand name

pydantic - Data validation

python-dateutil - Dependency for tldextract

beautifulsoup4 + lxml (optional) - HTML parsing

Install all:

pip install -r requirements.txt

Deployment

Can be deployed on Render or any Python-friendly host.

Make sure requirements.txt and run.sh are included.

Ensure python-dateutil is installed to avoid tldextract errors.

run.sh supports auto-reload during development.

Contributing

Fork the repository

Create a new branch for features/fixes

Submit a pull request
